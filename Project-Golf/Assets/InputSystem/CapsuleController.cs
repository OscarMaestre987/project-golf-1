//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/CapsuleController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CapsuleCheck: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CapsuleCheck()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CapsuleController"",
    ""maps"": [
        {
            ""name"": ""IPRevision"",
            ""id"": ""dd5f2934-58d4-4ada-b226-29dddcc5fce4"",
            ""actions"": [
                {
                    ""name"": ""Revision"",
                    ""type"": ""Button"",
                    ""id"": ""8463b435-6906-464d-be1b-71c173c54e9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8ad124c7-9060-4cfd-a41c-58b79c169a8e"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Revision"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2901d19-4824-43b9-bc7c-0d205e2d9f86"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Revision"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // IPRevision
        m_IPRevision = asset.FindActionMap("IPRevision", throwIfNotFound: true);
        m_IPRevision_Revision = m_IPRevision.FindAction("Revision", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // IPRevision
    private readonly InputActionMap m_IPRevision;
    private List<IIPRevisionActions> m_IPRevisionActionsCallbackInterfaces = new List<IIPRevisionActions>();
    private readonly InputAction m_IPRevision_Revision;
    public struct IPRevisionActions
    {
        private @CapsuleCheck m_Wrapper;
        public IPRevisionActions(@CapsuleCheck wrapper) { m_Wrapper = wrapper; }
        public InputAction @Revision => m_Wrapper.m_IPRevision_Revision;
        public InputActionMap Get() { return m_Wrapper.m_IPRevision; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IPRevisionActions set) { return set.Get(); }
        public void AddCallbacks(IIPRevisionActions instance)
        {
            if (instance == null || m_Wrapper.m_IPRevisionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_IPRevisionActionsCallbackInterfaces.Add(instance);
            @Revision.started += instance.OnRevision;
            @Revision.performed += instance.OnRevision;
            @Revision.canceled += instance.OnRevision;
        }

        private void UnregisterCallbacks(IIPRevisionActions instance)
        {
            @Revision.started -= instance.OnRevision;
            @Revision.performed -= instance.OnRevision;
            @Revision.canceled -= instance.OnRevision;
        }

        public void RemoveCallbacks(IIPRevisionActions instance)
        {
            if (m_Wrapper.m_IPRevisionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IIPRevisionActions instance)
        {
            foreach (var item in m_Wrapper.m_IPRevisionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_IPRevisionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public IPRevisionActions @IPRevision => new IPRevisionActions(this);
    public interface IIPRevisionActions
    {
        void OnRevision(InputAction.CallbackContext context);
    }
}
